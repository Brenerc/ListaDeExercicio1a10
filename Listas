
// Lista de Exercicio 1 - Soluções

// 1. Classe Animal
class Animal {
    private String nome;
    private String especie;

    public Animal(String nome, String especie) {
        this.nome = nome;
        this.especie = especie;
    }

    public String getNome() {
        return nome;
    }

    public String getEspecie() {
        return especie;
    }
}

// 2. Classe Pessoa
class Pessoa {
    private String nome;
    private int idade;

    public Pessoa(String nome, int idade) {
        this.nome = nome;
        this.idade = idade;
    }

    public String getNome() {
        return nome;
    }

    public int getIdade() {
        return idade;
    }
}

// 3. Classe Veiculo
class Veiculo {
    private String marca;
    private String modelo;
    private int ano;

    public Veiculo(String marca, String modelo, int ano) {
        this.marca = marca;
        this.modelo = modelo;
        this.ano = ano;
    }

    public String getMarca() {
        return marca;
    }

    public String getModelo() {
        return modelo;
    }

    public int getAno() {
        return ano;
    }
}

// 4. Classes Aluno e Professor que herdam de Pessoa
class Aluno extends Pessoa {
    private String matricula;
    private String curso;

    public Aluno(String nome, int idade, String matricula, String curso) {
        super(nome, idade);
        this.matricula = matricula;
        this.curso = curso;
    }

    public String getMatricula() {
        return matricula;
    }

    public String getCurso() {
        return curso;
    }
}

class Professor extends Pessoa {
    private String disciplina;
    private double salario;

    public Professor(String nome, int idade, String disciplina, double salario) {
        super(nome, idade);
        this.disciplina = disciplina;
        this.salario = salario;
    }

    public String getDisciplina() {
        return disciplina;
    }

    public double getSalario() {
        return salario;
    }
}

// 5. Classes Carro e Motocicleta que herdam de Veiculo
class Carro extends Veiculo {
    private int numeroPortas;

    public Carro(String marca, String modelo, int ano, int numeroPortas) {
        super(marca, modelo, ano);
        this.numeroPortas = numeroPortas;
    }

    public int getNumeroPortas() {
        return numeroPortas;
    }
}

class Motocicleta extends Veiculo {
    private int cilindradas;

    public Motocicleta(String marca, String modelo, int ano, int cilindradas) {
        super(marca, modelo, ano);
        this.cilindradas = cilindradas;
    }

    public int getCilindradas() {
        return cilindradas;
    }
}

// Lista de Exercicio 2 e 3 - Soluções (questões repetidas)

// 1. Programa que imprime de 0 a 100
class Contador0a100 {
    public static void main(String[] args) {
        for (int i = 0; i <= 100; i++) {
            System.out.println(i);
        }
    }
}

// 2. Programa que imprime de 1 a 100 e diz se é par ou ímpar
class ParOuImpar {
    public static void main(String[] args) {
        for (int i = 1; i <= 100; i++) {
            if (i % 2 == 0) {
                System.out.println(i + " é par");
            } else {
                System.out.println(i + " é ímpar");
            }
        }
    }
}

// 3. Programa que simula uma tabuada
class Tabuada {
    public static void main(String[] args) {
        int numero = 7; // Pode ser alterado para qualquer número
        for (int i = 1; i <= 10; i++) {
            System.out.println(numero + " x " + i + " = " + (numero * i));
        }
    }
}

// 4. Sistema para loja online (Lista 3, questão 4)
class Produto {
    private String nome;
    private double preco;
    private int quantidadeEmEstoque;

    public Produto(String nome, double preco, int quantidadeEmEstoque) {
        this.nome = nome;
        this.preco = preco;
        this.quantidadeEmEstoque = quantidadeEmEstoque;
    }

    public void comprar(int quantidade) {
        if (quantidade <= quantidadeEmEstoque) {
            quantidadeEmEstoque -= quantidade;
        }
    }

    public void exibirDetalhes() {
        System.out.println("Nome: " + nome + ", Preço: " + preco + ", Estoque: " + quantidadeEmEstoque);
    }
}

class Cliente {
    private String nome;
    private String email;
    private String endereco;

    public Cliente(String nome, String email, String endereco) {
        this.nome = nome;
        this.email = email;
        this.endereco = endereco;
    }

    public void fazerPedido(Pedido pedido) {
        // Implementação simplificada
    }

    public void exibirDados() {
        System.out.println("Nome: " + nome + ", Email: " + email + ", Endereço: " + endereco);
    }
}

class Pedido {
    private Cliente cliente;
    private Produto[] produtos;
    private double valorTotal;

    public Pedido(Cliente cliente, Produto[] produtos) {
        this.cliente = cliente;
        this.produtos = produtos;
        calcularTotal();
    }

    public void calcularTotal() {
        valorTotal = 0;
        for (Produto produto : produtos) {
            valorTotal += produto.getPreco();
        }
    }

    public void exibirPedido() {
        System.out.println("Cliente: " + cliente.getNome());
        for (Produto produto : produtos) {
            produto.exibirDetalhes();
        }
        System.out.println("Total: " + valorTotal);
    }
}

// 5. Classes abstratas Pessoa, Aluno e Professor (Lista 3, questão 5)
abstract class PessoaAbstract {
    protected String nome;
    protected int idade;
    protected String cpf;
    protected String endereco;

    public PessoaAbstract(String nome, int idade, String cpf, String endereco) {
        this.nome = nome;
        this.idade = idade;
        this.cpf = cpf;
        this.endereco = endereco;
    }
}

class Aluno2 extends PessoaAbstract {
    private String matricula;
    private String curso;

    public Aluno2(String nome, int idade, String cpf, String endereco, String matricula, String curso) {
        super(nome, idade, cpf, endereco);
        this.matricula = matricula;
        this.curso = curso;
    }
}

class Professor2 extends PessoaAbstract {
    private double salario;
    private String disciplina;
    private String areaAtuacao;

    public Professor2(String nome, int idade, String cpf, String endereco, double salario, String disciplina, String areaAtuacao) {
        super(nome, idade, cpf, endereco);
        this.salario = salario;
        this.disciplina = disciplina;
        this.areaAtuacao = areaAtuacao;
    }
}

// 6. Classes abstratas ContaBancaria, ContaPoupanca e ContaCorrente (Lista 3, questão 6)
abstract class ContaBancaria {
    protected String numeroConta;
    protected double saldo;

    public ContaBancaria(String numeroConta, double saldo) {
        this.numeroConta = numeroConta;
        this.saldo = saldo;
    }

    public abstract void depositar(double valor);
    public abstract void sacar(double valor);
}

class ContaPoupanca extends ContaBancaria {
    private double taxaJuros;

    public ContaPoupanca(String numeroConta, double saldo, double taxaJuros) {
        super(numeroConta, saldo);
        this.taxaJuros = taxaJuros;
    }

    @Override
    public void depositar(double valor) {
        saldo += valor;
    }

    @Override
    public void sacar(double valor) {
        if (valor <= saldo) {
            saldo -= valor;
        }
    }

    public void aplicarJuros() {
        saldo += saldo * taxaJuros;
    }
}

class ContaCorrente extends ContaBancaria {
    private double limiteChequeEspecial;

    public ContaCorrente(String numeroConta, double saldo, double limiteChequeEspecial) {
        super(numeroConta, saldo);
        this.limiteChequeEspecial = limiteChequeEspecial;
    }

    @Override
    public void depositar(double valor) {
        saldo += valor;
    }

    @Override
    public void sacar(double valor) {
        if (valor <= saldo + limiteChequeEspecial) {
            saldo -= valor;
        }
    }
}

// Lista de Exercicio 4 - Soluções

// 1. Sistema de produtos eletrônicos
class ProdutoEletronico {
    protected String nome;
    protected double preco;

    public ProdutoEletronico(String nome, double preco) {
        this.nome = nome;
        this.preco = preco;
    }

    public void exibirEspecificacoes() {
        System.out.println("Nome: " + nome + ", Preço: " + preco);
    }
}

class Smartphone extends ProdutoEletronico {
    private String sistemaOperacional;

    public Smartphone(String nome, double preco, String sistemaOperacional) {
        super(nome, preco);
        this.sistemaOperacional = sistemaOperacional;
    }

    @Override
    public void exibirEspecificacoes() {
        super.exibirEspecificacoes();
        System.out.println("Sistema Operacional: " + sistemaOperacional);
    }
}

class Notebook extends ProdutoEletronico {
    private int memoriaRAM;

    public Notebook(String nome, double preco, int memoriaRAM) {
        super(nome, preco);
        this.memoriaRAM = memoriaRAM;
    }

    @Override
    public void exibirEspecificacoes() {
        super.exibirEspecificacoes();
        System.out.println("Memória RAM: " + memoriaRAM + "GB");
    }
}

class Smartwatch extends ProdutoEletronico {
    private boolean resistenciaAgua;

    public Smartwatch(String nome, double preco, boolean resistenciaAgua) {
        super(nome, preco);
        this.resistenciaAgua = resistenciaAgua;
    }

    @Override
    public void exibirEspecificacoes() {
        super.exibirEspecificacoes();
        System.out.println("Resistência à água: " + (resistenciaAgua ? "Sim" : "Não"));
    }
}

// 2. Sistema de gerenciamento de animais (implementação similar à questão 1)
// 3-10. Outros sistemas (implementações seguindo padrão similar)

// Lista de Exercicio 5 - Soluções

// 1. Sistema que gerencia notas de alunos
class AlunoNotas {
    private String nome;
    private double[] notas;

    public AlunoNotas(String nome, int quantidadeNotas) {
        this.nome = nome;
        this.notas = new double[quantidadeNotas];
    }

    public void adicionarNota(int indice, double nota) {
        if (indice >= 0 && indice < notas.length) {
            notas[indice] = nota;
        }
    }

    public double calcularMedia() {
        double soma = 0;
        for (double nota : notas) {
            soma += nota;
        }
        return soma / notas.length;
    }
}

// 2. Sistema que controla estoque de produtos
class ProdutoEstoque {
    private String nome;
    private double preco;
    private int quantidade;

    public ProdutoEstoque(String nome, double preco, int quantidade) {
        this.nome = nome;
        this.preco = preco;
        this.quantidade = quantidade;
    }

    public void adicionarEstoque(int quantidade) {
        this.quantidade += quantidade;
    }

    public void removerEstoque(int quantidade) {
        if (quantidade <= this.quantidade) {
            this.quantidade -= quantidade;
        }
    }

    public void exibirEstoque() {
        System.out.println("Produto: " + nome + ", Preço: " + preco + ", Quantidade: " + quantidade);
    }
}

// 3-10. Outros sistemas (implementações seguindo padrão similar)

// Lista de Exercicio 6 - Soluções

// 1. Contador de objetos
class ContadorObjetos {
    private static int total = 0;

    public ContadorObjetos() {
        total++;
    }

    public static int getTotal() {
        return total;
    }
}

// 2. Sistema de operações matemáticas
class OperacoesMatematicas {
    public static double somar(double a, double b) {
        return a + b;
    }

    public static double areaCirculo(double raio) {
        return Math.PI * raio * raio;
    }
}

// 3. Representação de formas geométricas
abstract class FormaGeometrica {
    public abstract double calcularArea();
    public abstract double calcularPerimetro();
}

class Retangulo extends FormaGeometrica {
    private double base;
    private double altura;

    public Retangulo(double base, double altura) {
        this.base = base;
        this.altura = altura;
    }

    @Override
    public double calcularArea() {
        return base * altura;
    }

    @Override
    public double calcularPerimetro() {
        return 2 * (base + altura);
    }
}

// 4. Modelo de livro com categorias fixas
class Livro {
    private String titulo;
    private String autor;
    private Categoria categoria;

    public enum Categoria {
        FICCAO, CIENCIAS, HISTORIA, OUTROS
    }

    public Livro(String titulo, String autor, Categoria categoria) {
        this.titulo = titulo;
        this.autor = autor;
        this.categoria = categoria;
    }
}

// 5. Sistema de autenticação
class Autenticacao {
    private String usuario;
    private String senha;

    public Autenticacao(String usuario, String senha) {
        this.usuario = usuario;
        this.senha = senha;
    }

    public boolean autenticar(String senhaDigitada) {
        return senha.equals(senhaDigitada);
    }

    public static void solicitarAutenticacao() {
        System.out.println("Por favor, autentique-se com seu usuário e senha.");
    }
}

// 6-10. Outros sistemas (implementações seguindo padrão similar)

public class TodasSolucoes {
    public static void main(String[] args) {
        // Exemplos de uso das classes implementadas
        System.out.println("Soluções implementadas com sucesso!");
    }
}
